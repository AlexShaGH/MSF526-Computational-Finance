# -*- coding: utf-8 -*-

# MCOptionPrices.py - Approximation of the prices of European Options
# MSF 526
# Illinois Institute of Technology
# Homework 2
# Author: Oleksandr Shashkov
# ID: A20229995
# Email: oshashko@hawk.iit.edu

__author__ = "oshashkov"

def MCOptionPrices(S0, K, T, rateCurve, sigma, t, checkpoints, samples, integrator):
    """ Makes Approximation of the prices of European Options
    

    Parameters
    ----------
    S0 : float
        the stock prices at time t0
    K : float
        the strike price
    T : float
        the expiration date of the European option
    rateCurve : numpy array
        an InterestRateCurve stored as a numpy array
    sigma : float
        the constant volatility
    t : array
        an array of fixing times ti; i = 1...N to simulate to
    checkpoints : ordered list
        an ordered list of integer sample counts in the range [1,M] 
        at which to return the running mean, standard deviation, and
        estimated error
    samples : TYPE
        an array of uniform random samples to use. The length of samples 
        should be N x M where N is the number of fixing times and 
        M is the number of paths
    integrator : string
        controls how the samples are generated according
        to the following value list:
        - 'standard', the paths are generated by using the solution of
        the Black-Scholes SDE step-by-step
        - 'euler', to use Euler-method integration of the BlackScholes SDE
        - 'milstein', to use Milstein-method integration of the BlackScholes SDE


    Returns
    -------
    dict { 'TV': , # The final value ( i.e. mean of option price at time t_0 using NxM uniform random samples)
            'Means': , # The running mean at each checkpoint
            'StdDevs': , # The running standard deviation at each checkpoint
            'StdErrs': , # The running standard error at each checkpoint
            }

    """
    return { 'TV': , # The final value ( i.e. mean of option price at time t_0 using NxM uniform random samples)
            'Means': , # The running mean at each checkpoint
            'StdDevs': , # The running standard deviation at each checkpoint
            'StdErrs': , # The running standard error at each checkpoint
            }