Rajat

if __name__ == '__main__':
    



    print(MCStockPrices(100., 0.25, 0., t, samples, 'standard'))
          MCStockPrices(S0, sigma, rateCurve, t, samples, integrator):


    rate = pd.read_csv("/Users/rajatdua/Documents/Illinois Institute of Technology/Fall 2019 Semester/Computational Finance/Homework/Treasury Yield Data.csv", sep=',', header = None)
    rate_data = np.delete(rate.values, [0], axis = 1)
    
    date = np.delete(rate_data, np.s_[1:], 0)
    rateCurve = np.delete(rate_data, np.s_[0:-1], 0)
    
    date = np.ravel(np.array(date, dtype = np.float32))
    rateCurve = np.ravel(np.array(rateCurve, dtype = np.float32))
    
    #print(date)
    #print(rateCurve)
    
    r = 0.
    T = choice(t)
    
    if np.any(date) == T:
        i = np.where(date == T)
        r = rateCurve[i]/100
    else:
        r = np.interp(T, date, rateCurve)/100
    
    M=np.shape(samples)[0] #Default Value
        
    dT = np.diff(np.append(np.array([0]), np.array(t)))
    z = randn(M,len(t))
    #dS = []
    
    if integrator == 'standard':
        dS = S0*np.cumprod(exp((r-0.5*sigma**2)*dT + sigma*sqrt(dT)*z),axis=1)


**************************************************************************************
KONG

 elif integrator == 'milstein':
            delta=sigma
            ST_array[0] = S0*(1.+r[0]*t[0]+sigma*np.sqrt(t[0])*n_samples[0,:]+0.5*sigma*delta*(t[0]*n_samples[0,:]**2-t[0]))
            for i in range(1,len(t)):
                dt =t[i]-t[i-1]
                ST_array[i]= ST_array[i-1]*(1.+r[i]*dt+sigma*np.sqrt(dt)*n_samples[i,:]+0.5*sigma*delta*(dt*n_samples[i,:]**2-dt))

Xiangpei Kong
36:07
and i compared codes with 'euler', the only difference is 
"0.5*sigma*delta*(dt*n_samples[i,:]**2-dt)". 

So i think maybe there are problems in this part

Xiangpei Kong
36:23
but i am not sure how to correct it

**************************************************************************************
Rajat Dua
49:16


for i in range(len(np_checkpoints)):
 
       end = np_checkpoints[i]

        if integrator == 'standard':

            price_samples = S0*np.prod(exp((r-0.5*sigma**2)*dT + sigma*sqrt(dT)*z[start:end]), axis = 1)



**************************************************************************************

if __name__ == '__main__':
    
    samples = randn(70000, 1000)
    t = np.linspace(0.001,30,np.shape(samples)[1])
    
    print(MCStockPrices(100., 0.25, 0., t, samples, 'milstein'))